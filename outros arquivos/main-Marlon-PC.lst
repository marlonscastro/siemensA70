CCS PCH C Compiler, Version 4.114, 93460303               22-jun-13 20:28

               Filename: D:\SkyDrive\Eletronica\PROJETOS PIC CCS\LCD SIEMENS A70 LCD\main.lst

               ROM used: 280 bytes (1%)
                         Largest free fragment is 32488
               RAM used: 6 (0%) at main() level
                         9 (0%) worst case
               Stack:    2 locations

*
0000:  GOTO   0100
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
.................... #use delay(clock=48000000) 
.................... #fuses HSPLL, PLL4, CPUDIV1, PUT, NOWDT, NOBROWNOUT, NOLVP 
....................  
.................... #include "a70_lcd.c" 
.................... // d2 --- cs 
.................... // d3 --- reset 
.................... // c4 --- rs 
.................... // c5 --- clk 
.................... // c6 --- data 
....................  
.................... #define cs        PIN_d2 //  
.................... #define reset     PIN_d3 //  
.................... #define rs        PIN_c4 //  
.................... #define clk       PIN_c5 //  
.................... #define data      PIN_c6 // 
....................  
.................... void Reset_LCD(void){ 
....................   delay_us(10); 
0004:  MOVLW  27
0006:  MOVWF  00
0008:  DECFSZ 00,F
000A:  BRA    0008
000C:  BRA    000E
....................   output_low(data); 
000E:  BCF    F94.6
0010:  BCF    F8B.6
....................   output_low(clk);   
0012:  BCF    F94.5
0014:  BCF    F8B.5
....................   output_low(rs); 
0016:  BCF    F94.4
0018:  BCF    F8B.4
....................   delay_us(10); 
001A:  MOVLW  27
001C:  MOVWF  00
001E:  DECFSZ 00,F
0020:  BRA    001E
0022:  BRA    0024
....................   output_high(reset); 
0024:  BCF    F95.3
0026:  BSF    F8C.3
....................   delay_us(10); 
0028:  MOVLW  27
002A:  MOVWF  00
002C:  DECFSZ 00,F
002E:  BRA    002C
0030:  BRA    0032
....................   output_low(cs); 
0032:  BCF    F95.2
0034:  BCF    F8C.2
....................   delay_us(10); 
0036:  MOVLW  27
0038:  MOVWF  00
003A:  DECFSZ 00,F
003C:  BRA    003A
003E:  BRA    0040
....................   output_low(reset); 
0040:  BCF    F95.3
0042:  BCF    F8C.3
....................   delay_us(10);   
0044:  MOVLW  27
0046:  MOVWF  00
0048:  DECFSZ 00,F
004A:  BRA    0048
004C:  BRA    004E
....................   output_high(reset); 
004E:  BCF    F95.3
0050:  BSF    F8C.3
....................   output_high(cs); 
0052:  BCF    F95.2
0054:  BSF    F8C.2
.................... } 
0056:  GOTO   00C6 (RETURN)
....................  
....................  
.................... // ------------------------------------------------------------------ 
.................... // command to display 
.................... // ------------------------------------------------------------------ 
.................... void SendCommand(BYTE Command) 
.................... { 
.................... BYTE i,s; 
....................  
....................   s=0x80; 
005A:  MOVLW  80
005C:  MOVWF  09
....................  
....................   output_low(data); 
005E:  BCF    F94.6
0060:  BCF    F8B.6
....................   output_low(clk); 
0062:  BCF    F94.5
0064:  BCF    F8B.5
....................   output_low(rs); 
0066:  BCF    F94.4
0068:  BCF    F8B.4
....................   output_low(cs); 
006A:  BCF    F95.2
006C:  BCF    F8C.2
....................   delay_us(10); 
006E:  MOVLW  27
0070:  MOVWF  00
0072:  DECFSZ 00,F
0074:  BRA    0072
0076:  BRA    0078
....................   for (i=0; i<8; i++)  
0078:  CLRF   08
007A:  MOVF   08,W
007C:  SUBLW  07
007E:  BNC   00BE
....................   { 
....................     if (Command & s) { output_high(data); }  
0080:  MOVF   07,W
0082:  ANDWF  09,W
0084:  BZ    008C
0086:  BCF    F94.6
0088:  BSF    F8B.6
....................     else             { output_low(data); } 
008A:  BRA    0090
008C:  BCF    F94.6
008E:  BCF    F8B.6
....................     s = s>>1; 
0090:  BCF    FD8.0
0092:  RRCF   09,F
....................     delay_us(10); 
0094:  MOVLW  27
0096:  MOVWF  00
0098:  DECFSZ 00,F
009A:  BRA    0098
009C:  BRA    009E
....................     output_high(clk); 
009E:  BCF    F94.5
00A0:  BSF    F8B.5
....................     delay_us(10); 
00A2:  MOVLW  27
00A4:  MOVWF  00
00A6:  DECFSZ 00,F
00A8:  BRA    00A6
00AA:  BRA    00AC
....................     output_low(clk);; 
00AC:  BCF    F94.5
00AE:  BCF    F8B.5
....................     delay_us(10); 
00B0:  MOVLW  27
00B2:  MOVWF  00
00B4:  DECFSZ 00,F
00B6:  BRA    00B4
00B8:  BRA    00BA
....................   } 
00BA:  INCF   08,F
00BC:  BRA    007A
....................   output_high(cs); 
00BE:  BCF    F95.2
00C0:  BSF    F8C.2
.................... } 
00C2:  RETLW  00
....................  
....................  
.................... // ------------------------------------------------------------------ 
.................... // 
.................... // ------------------------------------------------------------------ 
.................... void Init_LCD(void) 
.................... { 
....................  
....................   Reset_LCD(); 
00C4:  BRA    0004
....................  
....................   SendCommand(0b00100001);    // Function set: chip is active, horizontal addressing, use extended instruction set 
00C6:  MOVLW  21
00C8:  MOVWF  07
00CA:  RCALL  005A
....................   SendCommand(0b11011010);    //  
00CC:  MOVLW  DA
00CE:  MOVWF  07
00D0:  RCALL  005A
....................   SendCommand(0b00010100);    // Display control: ?     
00D2:  MOVLW  14
00D4:  MOVWF  07
00D6:  RCALL  005A
....................   SendCommand(0b00001011);    // Set voltage multiplier factor -> ok 
00D8:  MOVLW  0B
00DA:  MOVWF  07
00DC:  RCALL  005A
....................   SendCommand(0b00000101);    // Temperature controlVLCD temperature coefficient 1 
00DE:  MOVLW  05
00E0:  MOVWF  07
00E2:  RCALL  005A
....................   SendCommand((128+80));      // contrast 
00E4:  MOVLW  D0
00E6:  MOVWF  07
00E8:  RCALL  005A
....................   SendCommand(0b00100000);    // Function set 
00EA:  MOVLW  20
00EC:  MOVWF  07
00EE:  RCALL  005A
....................   SendCommand(0b00010001);    // VLCD programming range: high 
00F0:  MOVLW  11
00F2:  MOVWF  07
00F4:  RCALL  005A
....................   SendCommand(0b00001100);    // Display control: normal  
00F6:  MOVLW  0C
00F8:  MOVWF  07
00FA:  RCALL  005A
.................... //    SendCommand(0b00001101);    // Display control: inverse -> ok 
.................... }    
00FC:  GOTO   0116 (RETURN)
....................  
....................  
.................... // ------------------------------------------------------------------ 
.................... // Line: 0..7, Row 0..100; 
.................... // ------------------------------------------------------------------ 
.................... void GotoLineRow(BYTE Line, BYTE Row) 
.................... { 
....................   SendCommand( 0b00101000); 
....................   SendCommand((0b01000000 + Line)); 
....................   SendCommand((0b10000000 + Row )); 
.................... } 
....................  
....................  
.................... // ------------------------------------------------------------------ 
.................... // data to display 
.................... // ------------------------------------------------------------------ 
.................... void SendData(BYTE Value) 
.................... {           
....................   BYTE i,s; 
....................  
....................   s=0x80; 
....................   output_low(data); 
....................   output_low(clk);; 
....................   output_high(rs); 
....................   output_low(cs); 
....................  
....................   delay_us(10); 
....................   for (i=0; i<8; i++)  
....................   { 
....................     if (Value & s) { output_high(data); }  
....................     else           { output_low(data); } 
....................     s = s>>1; 
....................     delay_us(10); 
....................     output_high(clk); 
....................     delay_us(10); 
....................     output_low(clk);; 
....................     delay_us(10); 
....................   } 
....................   output_high(cs); 
.................... } 
....................  
....................  
.................... // ------------------------------------------------------------------ 
....................  
....................  
.................... void main(void) 
.................... { 
0100:  CLRF   FF8
0102:  BCF    FD0.7
0104:  CLRF   FEA
0106:  CLRF   FE9
0108:  MOVF   FC1,W
010A:  ANDLW  C0
010C:  IORLW  0F
010E:  MOVWF  FC1
0110:  MOVLW  07
0112:  MOVWF  FB4
....................   long i; 
....................   Init_LCD(); 
0114:  BRA    00C4
....................   /*delay_ms(500); 
....................   for (i=0; i<((101*64)/8+8); i++) { SendData(0x00); } 
....................  
....................   while (1) {  
....................     GotoLineRow(0,0); 
....................     for (i=0; i<((101*64)/8+8); i++) { SendData(0xFF); _delay_ms(10); } 
....................     GotoLineRow(0,0); 
....................     for (i=0; i<((101*64)/8+8); i++) { SendData(0x00); _delay_ms(10); } 
....................   };*/ 
.................... } 
....................  
.................... //--------------------------------------------------------------------------------- 
0116:  SLEEP 

Configuration Fuses:
   Word  1: CE23   PLL4 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 1E38   PUT NOBROWNOUT BORV20 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICPRT NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
